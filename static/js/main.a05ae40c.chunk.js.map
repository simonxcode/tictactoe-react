{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["containerStyle","marginTop","marginBottom","padding","textAlign","marginLeft","marginRight","divStyle","paddingTop","paddingBottom","buttonStyle","color","Square","props","react_default","a","createElement","className","onClick","value","Board","i","_this","this","squares","renderSquare","React","Component","calculateWinner","lines","length","_lines$i","Object","slicedToArray","b","c","Game","_this2","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","resetGame","bind","assertThisInitialized","state","Array","fill","xIsNext","setState","slice","status","_this3","winner","Grid_default","container","spacing","Paper_default","style","App_Board","handleClick","Divider_default","Button_default","variant","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a05ae40c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Button from '@material-ui/core/Button';\nimport Divider from '@material-ui/core/Divider';\n\nconst containerStyle = {\n  marginTop: '8rem',\n  marginBottom: '8rem',\n  padding: '2rem',\n  textAlign: 'center',\n  marginLeft: 'auto',\n  marginRight: 'auto',\n}\n\nconst divStyle = {\n  paddingTop: '.5rem',\n  paddingBottom: '2.5rem'\n}\n\nconst buttonStyle = {\n  color: '#404040'\n}\n\nfunction Square(props) {\n  return (\n    <button className=\"square\" onClick={props.onClick}>\n      {props.value}\n    </button>\n  );\n}\n\nclass Board extends React.Component {\n\n  renderSquare(i) {\n    return (\n      <Square value={this.props.squares[i]}\n        onClick={() => this.props.onClick(i)}\n      />\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <table className=\"board-row\">\n          <tbody>\n            <tr>\n              <td>{this.renderSquare(0)}</td>\n              <td className=\"vertical\">{this.renderSquare(1)}</td>\n              <td>{this.renderSquare(2)}</td>\n            </tr>\n          </tbody>\n        </table>\n        <table className=\"board-row\">\n          <tbody>\n            <tr>\n              <td className=\"horizontal\">{this.renderSquare(3)}</td>\n              <td className=\"vertical horizontal\">{this.renderSquare(4)}</td>\n              <td className=\"horizontal\">{this.renderSquare(5)}</td>\n            </tr>\n          </tbody>\n        </table>\n        <table className=\"board-row\">\n          <tbody>\n            <tr>\n              <td>{this.renderSquare(6)}</td>\n              <td className=\"vertical\">{this.renderSquare(7)}</td>\n              <td>{this.renderSquare(8)}</td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nclass Game extends Component {\n\n  constructor(props) {\n    super(props);\n    this.resetGame = this.resetGame.bind(this);\n    this.state = {\n      squares: Array(9).fill(null),\n      xIsNext: true,\n    };\n  }\n\n  resetGame() {\n    this.setState(() => {\n      return {\n        squares: Array(9).fill(null),\n        xIsNext: true,\n      }\n    });\n  }\n\n  handleClick(i) {\n    const squares = this.state.squares.slice();\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      squares: squares,\n      xIsNext: !this.state.xIsNext,\n    });\n  }\n\n  render() {\n    const winner = calculateWinner(this.state.squares);\n    let status;\n    if (winner) {\n      status = 'Winner: ' + winner;\n    } else {\n      status = 'Next Player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n\n    return (\n      <Grid container spacing={32}>\n        <Paper style={containerStyle}>\n          <div className=\"game\">\n            <div style={divStyle} className=\"game-board\">\n              <Board\n                squares={this.state.squares}\n                onClick={(i) => this.handleClick(i)}\n              />\n            </div>\n            <Divider />\n            <div style={divStyle} className=\"game-info\">\n              <div>{status}</div>\n            </div>\n            <Button style={buttonStyle} variant=\"contained\" color=\"default\" onClick={this.resetGame}>Reset Game</Button>\n          </div>\n        </Paper>\n      </Grid>\n    );\n  }\n}\n\n//helper function\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\n\nexport default Game;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('app'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}